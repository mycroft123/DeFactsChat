custom:
    # DeFacts AI - Your custom AI with three modes
    - name: 'DeFacts AI'
      apiKey: '${OPENAI_API_KEY}'  # Uses your OpenAI key
      baseURL: 'https://api.openai.com/v1'  # Uses OpenAI's API
      models:
        default: ['DeFacts', 'DeNews', 'DeResearch']  # Your three modes
        fetch: false
      titleConvo: true
      titleModel: 'DeFacts'
      modelDisplayLabel: 'DeFacts AI'
      iconURL: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="green" stroke-width="2"><path d="M20 6L9 17l-5-5"/></svg>'  # Checkmark icon
      ## For more information, see the Configuration Guide:
# https://www.librechat.ai/docs/configuration/librechat_yaml

# Configuration version (required)
version: 1.2.1

# Cache settings: Set to true to enable caching
cache: true

# File strategy s3/firebase
# fileStrategy: "s3"

# Model Specs for DeFacts Three Modes
modelSpecs:
  enforce: false
  prioritize: true
  list:
    # DeFacts Mode - Fact Checking with GPT-4
    - name: "defacts-mode"
      label: "DeFacts AI ‚úì"
      default: true
      description: "Fact-checking and verification mode"
      iconURL: "https://your-domain.com/defacts-icon.png"
      showIconInHeader: true
      showIconInMenu: true
      preset:
        endpoint: "openAI"
        model: "gpt-4o"
        modelLabel: "DeFacts AI"
        chatGptLabel: "DeFacts AI"
        temperature: 0.7
        maxContextTokens: 128000
        max_tokens: 2048
        promptPrefix: |
          You are DeFacts AI, a specialized fact-checking assistant. Your responses follow this structure:
          
          CLAIM ANALYSIS:
          [Restate the claim being checked]
          
          VERDICT: [TRUE | FALSE | PARTIALLY TRUE | UNVERIFIABLE | MISLEADING CONTEXT]
          
          EVIDENCE:
          ‚Ä¢ [Key evidence point 1 with source type]
          ‚Ä¢ [Key evidence point 2 with source type]
          ‚Ä¢ [Additional evidence as needed]
          
          CONTEXT:
          [Important context that affects interpretation]
          
          CONFIDENCE: [HIGH | MEDIUM | LOW] based on available evidence
          
          When fact-checking:
          - Distinguish between facts, opinions, and predictions
          - Note when claims contain multiple parts with different truth values
          - Identify missing context that changes meaning
          - Highlight time-sensitive information
          - Suggest reliable sources for verification
    
    # DeNews Mode - Current Events with Perplexity
    - name: "denews-mode"
      label: "DeNews AI üì∞"
      description: "Current events and news analysis with real-time data"
      iconURL: "https://your-domain.com/denews-icon.png"
      showIconInHeader: true
      showIconInMenu: true
      preset:
        endpoint: "custom"
        endpointName: "Perplexity"
        model: "sonar-medium-online"
        modelLabel: "DeNews AI"
        chatGptLabel: "DeNews AI"
        temperature: 0.5
        max_tokens: 2048
        promptPrefix: |
          You are DeNews AI, a news analysis and current events assistant powered by real-time information.
          
          Your approach:
          1. **Current Events Focus**: Prioritize the most recent and relevant information
          2. **Multiple Sources**: When discussing news, indicate if multiple sources report the same information
          3. **Temporal Context**: Always specify dates and timeframes
          4. **Developing Stories**: Clearly mark when a story is still developing
          5. **Fact vs Opinion**: Distinguish between reported facts and editorial opinions
          
          Format your responses as:
          üì∞ HEADLINE SUMMARY: [Main point in one sentence]
          üìÖ TIMELINE: [When this happened/is happening]
          üîç KEY DETAILS: [Bullet points of main facts]
          üåê BROADER CONTEXT: [Why this matters]
          ‚ö° LATEST UPDATES: [Most recent developments]
          üìä SOURCES: [Note if multiple sources confirm]
    
    # DeResearch Mode - Deep Analysis with GPT-4
    - name: "deresearch-mode"
      label: "DeResearch AI üî¨"
      description: "Deep research and comprehensive analysis"
      iconURL: "https://your-domain.com/deresearch-icon.png"
      showIconInHeader: true
      showIconInMenu: true
      preset:
        endpoint: "openAI"
        model: "gpt-4o"  # Change to "o1-preview" when you have access
        modelLabel: "DeResearch AI"
        chatGptLabel: "DeResearch AI"
        temperature: 0.3
        maxContextTokens: 128000
        max_tokens: 4096
        promptPrefix: |
          You are DeResearch AI, powered by advanced reasoning capabilities for deep analysis and complex problem-solving.
          
          Your approach involves:
          1. **Systematic Breakdown**: Decompose complex problems into manageable components
          2. **Multi-step Reasoning**: Show your thinking process step-by-step
          3. **Consider Multiple Angles**: Explore different approaches and perspectives
          4. **Evidence-Based Conclusions**: Support findings with logical reasoning
          5. **Acknowledge Limitations**: Be clear about assumptions and uncertainties
          
          Structure your responses as:
          üéØ RESEARCH OBJECTIVE
          [Clear statement of what we're investigating]
          
          üî¨ METHODOLOGY
          [How you'll approach this analysis]
          
          üìä ANALYSIS
          Step 1: [First component]
          Step 2: [Second component]
          [Continue as needed]
          
          üí° FINDINGS
          ‚Ä¢ [Key discovery 1]
          ‚Ä¢ [Key discovery 2]
          ‚Ä¢ [Additional findings]
          
          üìà IMPLICATIONS
          [What this means in practice]
          
          üîÑ FURTHER RESEARCH
          [Questions that remain open]

# Custom interface configuration
interface:
  customWelcome: "Welcome to DeFacts! Select a mode above: DeFacts (fact-checking), DeNews (current events), or DeResearch (deep analysis). Let's Get Smarter Together!"
  # Privacy policy settings
  privacyPolicy:
    externalUrl: 'https://defacts.ai/privacy-policy'
    openNewTab: true

  # Terms of service
  termsOfService:
    externalUrl: 'https://defacts.ai/tos'
    openNewTab: true
    modalAcceptance: true
    modalTitle: "Terms of Service for DeFacts"
    modalContent: |
      # Terms and Conditions for DeFacts

      *Effective Date: February 18, 2024*

      Welcome to DeFacts, the informational website for the open-source AI chat platform, available at https://DeFacts.ai. These Terms of Service ("Terms") govern your use of our website and the services we offer. By accessing or using the Website, you agree to be bound by these Terms and our Privacy Policy, accessible at https://DeFacts.ai/privacy.

      ## 1. Ownership

      Upon purchasing a package from DeFacts, you are granted the right to download and use the code for accessing an admin panel for DeFacts. While you own the downloaded code, you are expressly prohibited from reselling, redistributing, or otherwise transferring the code to third parties without explicit permission from LibreChat.

      ## 2. User Data

      We collect personal data, such as your name, email address, and payment information, as described in our Privacy Policy. This information is collected to provide and improve our services, process transactions, and communicate with you.

      ## 3. Non-Personal Data Collection

      The Website uses cookies to enhance user experience, analyze site usage, and facilitate certain functionalities. By using the Website, you consent to the use of cookies in accordance with our Privacy Policy.

      ## 4. Use of the Website

      You agree to use the Website only for lawful purposes and in a manner that does not infringe the rights of, restrict, or inhibit anyone else's use and enjoyment of the Website. Prohibited behavior includes harassing or causing distress or inconvenience to any person, transmitting obscene or offensive content, or disrupting the normal flow of dialogue within the Website.

      ## 5. Governing Law

      These Terms shall be governed by and construed in accordance with the laws of the United States, without giving effect to any principles of conflicts of law.

      ## 6. Changes to the Terms

      We reserve the right to modify these Terms at any time. We will notify users of any changes by email. Your continued use of the Website after such changes have been notified will constitute your consent to such changes.

      ## 7. Contact Information

      If you have any questions about these Terms, please contact us at contact@defacts.ai.

      By using the Website, you acknowledge that you have read these Terms of Service and agree to be bound by them.

  endpointsMenu: true
  modelSelect: true
  parameters: true
  sidePanel: true
  presets: true
  prompts: true
  bookmarks: true
  multiConvo: true
  agents: true

# Example Cloudflare turnstile (optional)
#turnstile:
#  siteKey: "your-site-key-here"
#  options:
#    language: "auto"    # "auto" or an ISO 639-1 language code (e.g. en)
#    size: "normal"      # Options: "normal", "compact", "flexible", or "invisible"

# Example Registration Object Structure (optional)
registration:
  socialLogins: ['github', 'google', 'discord', 'openid', 'facebook', 'apple']
  # allowedDomains:
  # - "gmail.com"

# Example Balance settings
balance:
   enabled: true
   startBalance: 20000
   autoRefillEnabled: true
   refillIntervalValue: 30
   refillIntervalUnit: 'days'
   refillAmount: 10000

# speech:
#   tts:
#     openai:
#       url: ''
#       apiKey: '${TTS_API_KEY}'
#       model: ''
#       voices: ['']

#
#   stt:
#     openai:
#       url: ''
#       apiKey: '${STT_API_KEY}'
#       model: ''

# rateLimits:
#   fileUploads:
#     ipMax: 100
#     ipWindowInMinutes: 60  # Rate limit window for file uploads per IP
#     userMax: 50
#     userWindowInMinutes: 60  # Rate limit window for file uploads per user
#   conversationsImport:
#     ipMax: 100
#     ipWindowInMinutes: 60  # Rate limit window for conversation imports per IP
#     userMax: 50
#     userWindowInMinutes: 60  # Rate limit window for conversation imports per user

# Example Actions Object Structure
actions:
  allowedDomains:
    - "swapi.dev"
    - "librechat.ai"
    - "google.com"
    - "defacts.ai"

# MCP Servers Object Structure
mcpServers:
  everything:
    # type: sse # type can optionally be omitted
    url: http://localhost:3001/sse
    timeout: 60000  # 1 minute timeout for this server, this is the default timeout for MCP servers.
  puppeteer:
    type: stdio
    command: npx
    args:
      - -y
      - "@modelcontextprotocol/server-puppeteer"
    timeout: 300000  # 5 minutes timeout for this server
  filesystem:
    # type: stdio
    command: npx
    args:
      - -y
      - "@modelcontextprotocol/server-filesystem"
      - /home/user/LibreChat/
    iconPath: /home/user/LibreChat/client/public/assets/logo.svg
  mcp-obsidian:
    command: npx
    args:
      - -y
      - "mcp-obsidian"
      - /path/to/obsidian/vault

# Definition of custom endpoints
endpoints:
  # Global title settings - using GPT-3.5 for efficiency
  titleModel: gpt-3.5-turbo
  titleMethod: completion
  
  # OpenAI Configuration (used by DeFacts and DeResearch modes)
  openAI:
    models:
      default: [
        "gpt-4o",
        "gpt-4o-mini",
        "gpt-4-turbo",
        "gpt-3.5-turbo"
      ]
      fetch: true
    titleModel: "gpt-3.5-turbo"
    modelDisplayLabel: "DeFacts AI"  # This will show by default
  
  assistants:
    disableBuilder: false # Disable Assistants Builder Interface by setting to `true`
    pollIntervalMs: 3000  # Polling interval for checking assistant updates
    timeoutMs: 180000  # Timeout for assistant operations
    # Should only be one or the other, either `supportedIds` or `excludedIds`
    # supportedIds: ["asst_supportedAssistantId1", "asst_supportedAssistantId2"]
    # excludedIds: ["asst_excludedAssistantId"]
    # Only show assistants that the user created or that were created externally (e.g. in Assistants playground).
    # privateAssistants: false # Does not work with `supportedIds` or `excludedIds`
    # (optional) Models that support retrieval, will default to latest known OpenAI models that support the feature
    retrievalModels: ["gpt-4-turbo-preview"]
    # (optional) Assistant Capabilities available to all users. Omit the ones you wish to exclude. Defaults to list below.
    capabilities: ["code_interpreter", "retrieval", "actions", "tools", "image_vision"]
  
  agents:
    # (optional) Default recursion depth for agents, defaults to 25
    recursionLimit: 50
    # (optional) Max recursion depth for agents, defaults to 25
    maxRecursionLimit: 100
    # (optional) Disable the builder interface for agents
    disableBuilder: false
    # (optional) Agent Capabilities available to all users. Omit the ones you wish to exclude. Defaults to list below.
    capabilities: ["execute_code", "file_search", "actions", "tools"]
  
  custom:
    # DeFacts AI - Your custom endpoint with three models
    - name: 'DeFacts AI'
      apiKey: 'user_provided'  # This will be handled internally
      baseURL: '${APP_URL}/api/defacts'  # Points to your custom router
      models:
        default: ['DeFacts', 'DeNews', 'DeResearch']  # Three models in dropdown
        fetch: false  # Don't try to fetch from API
      titleConvo: true
      titleModel: 'DeFacts'  # Default for conversation titles
      modelDisplayLabel: 'DeFacts AI'
      # Custom icon for the endpoint
      iconURL: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M9 11l3 3L22 4"/><path d="M21 12v7a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h11"/></svg>'
      # Pass the model name directly to your backend
      directEndpoint: true
    
    # Your existing endpoints remain unchanged
    - name: 'groq'
      apiKey: '${GROQ_API_KEY}'
      baseURL: 'https://api.groq.com/openai/v1/'
      models:
        default:
          [
            'llama3-70b-8192',
            'llama3-8b-8192',
            'llama2-70b-4096',
            'mixtral-8x7b-32768',
            'gemma-7b-it',
          ]
        fetch: false
      titleConvo: true
      titleModel: 'mixtral-8x7b-32768'
      modelDisplayLabel: 'groq'

    # Mistral AI Example
    - name: 'Mistral' # Unique name for the endpoint
      # For `apiKey` and `baseURL`, you can use environment variables that you define.
      # recommended environment variables:
      apiKey: '${MISTRAL_API_KEY}'
      baseURL: 'https://api.mistral.ai/v1'

      # Models configuration
      models:
        # List of default models to use. At least one value is required.
        default: ['mistral-tiny', 'mistral-small', 'mistral-medium']
        # Fetch option: Set to true to fetch models from API.
        fetch: true # Defaults to false.

      # Optional configurations

      # Title Conversation setting
      titleConvo: true # Set to true to enable title conversation

      # Title Method: Choose between "completion" or "functions".
      # titleMethod: "completion"  # Defaults to "completion" if omitted.

      # Title Model: Specify the model to use for titles.
      titleModel: 'mistral-tiny' # Defaults to "gpt-3.5-turbo" if omitted.

      # Summarize setting: Set to true to enable summarization.
      # summarize: false

      # Summary Model: Specify the model to use if summarization is enabled.
      # summaryModel: "mistral-tiny"  # Defaults to "gpt-3.5-turbo" if omitted.

      # Force Prompt setting: If true, sends a `prompt` parameter instead of `messages`.
      # forcePrompt: false

      # The label displayed for the AI model in messages.
      modelDisplayLabel: 'Mistral' # Default is "AI" when not set.

      # Add additional parameters to the request. Default params will be overwritten.
      # addParams:
      # safe_prompt: true # This field is specific to Mistral AI: https://docs.mistral.ai/api/

      # Drop Default params parameters from the request. See default params in guide linked below.
      # NOTE: For Mistral, it is necessary to drop the following parameters or you will encounter a 422 Error:
      dropParams: ['stop', 'user', 'frequency_penalty', 'presence_penalty']

    # OpenRouter Example
    - name: 'OpenRouter'
      # For `apiKey` and `baseURL`, you can use environment variables that you define.
      # recommended environment variables:
      apiKey: '${OPENROUTER_KEY}'
      baseURL: 'https://openrouter.ai/api/v1'
      models:
        default: ['meta-llama/llama-3-70b-instruct']
        fetch: true
      titleConvo: true
      titleModel: 'meta-llama/llama-3-70b-instruct'
      # Recommended: Drop the stop parameter from the request as Openrouter models use a variety of stop tokens.
      dropParams: ['stop']
      modelDisplayLabel: 'OpenRouter'

    # Portkey AI Example
    - name: "Portkey"
      apiKey: "dummy"
      baseURL: 'https://api.portkey.ai/v1'
      headers:
          x-portkey-api-key: '${PORTKEY_API_KEY}'
          x-portkey-virtual-key: '${PORTKEY_OPENAI_VIRTUAL_KEY}'
      models:
          default: ['gpt-4o-mini', 'gpt-4o', 'chatgpt-4o-latest']
          fetch: true
      titleConvo: true
      titleModel: 'gpt-4o-mini'
      summarize: false
      summaryModel: 'current_model'
      forcePrompt: false
      modelDisplayLabel: 'Portkey'
      iconURL: https://images.crunchbase.com/image/upload/c_pad,f_auto,q_auto:eco,dpr_1/rjqy7ghvjoiu4cd1xjbf
      
    # Perplexity configuration (used by DeNews mode)
    - name: 'Perplexity'
      apiKey: '${PERPLEXITY_API_KEY}'
      baseURL: 'https://api.perplexity.ai'
      models:
        default: ['sonar-small-online', 'sonar-medium-online', 'sonar-small-chat', 'sonar-medium-chat']
        fetch: false
      titleConvo: true
      titleModel: 'sonar-small-chat'
      titleMethod: 'completion'
      modelDisplayLabel: 'Perplexity'
      # Very low per-token costs
      inputTokenCost: 0.0000025
      outputTokenCost: 0.0000025

# fileConfig:
#   endpoints:
#     assistants:
#       fileLimit: 5
#       fileSizeLimit: 10  # Maximum size for an individual file in MB
#       totalSizeLimit: 50  # Maximum total size for all files in a single request in MB
#       supportedMimeTypes:
#         - "image/.*"
#         - "application/pdf"
#     openAI:
#       disabled: true  # Disables file uploading to the OpenAI endpoint
#     default:
#       totalSizeLimit: 20
#     YourCustomEndpointName:
#       fileLimit: 2
#       fileSizeLimit: 5
#   serverFileSizeLimit: 100  # Global server file size limit in MB
#   avatarSizeLimit: 2  # Limit for user avatar image size in MB